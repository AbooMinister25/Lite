use std::fmt;

/// The `TokenKind` enum consists of the Tokens that are part of the
/// Lite language.
#[derive(Debug, PartialEq, Clone, Eq, Hash)]
pub enum TokenKind {
    // Punctuation
    OpenParen,
    CloseParen,
    OpenBracket,
    CloseBracket,
    OpenBrace,
    CloseBrace,
    Comma,
    Dot,
    Semicolon,
    Colon,

    // Operators
    Equal,
    EqualEqual,
    Bang,
    BangEqual,
    Greater,
    GreaterEqual,
    Less,
    LessEqual,
    Plus,
    PlusEqual,
    Minus,
    MinusEqual,
    Star,
    StarEqual,
    Slash,
    SlashEqual,

    // Literals
    String(String),
    Char(char),
    Integer(String),
    Float(String),

    // Identifiers
    Ident(String),

    // Keywords
    And,
    Class,
    Do,
    Else,
    End,
    False,
    For,
    Func,
    If,
    In,
    Import,
    Let,
    Match,
    Mut,
    New,
    Or,
    Return,
    Trait,
    True,
    While,
    With,

    // Misc
    Newline,
    Error(String),
    EoF,
}

impl fmt::Display for TokenKind {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match self {
            TokenKind::OpenParen => write!(f, "("),
            TokenKind::CloseParen => write!(f, ")"),
            TokenKind::OpenBracket => write!(f, "["),
            TokenKind::CloseBracket => write!(f, "]"),
            TokenKind::OpenBrace => write!(f, "{{"),
            TokenKind::CloseBrace => write!(f, "}}"),
            TokenKind::Comma => write!(f, ","),
            TokenKind::Dot => write!(f, "."),
            TokenKind::Semicolon => write!(f, ";"),
            TokenKind::Colon => write!(f, ":"),
            TokenKind::Equal => write!(f, "="),
            TokenKind::EqualEqual => write!(f, "=="),
            TokenKind::Bang => write!(f, "!"),
            TokenKind::BangEqual => write!(f, "!="),
            TokenKind::Greater => write!(f, ">"),
            TokenKind::GreaterEqual => write!(f, ">="),
            TokenKind::Less => write!(f, "<"),
            TokenKind::LessEqual => write!(f, "<="),
            TokenKind::Plus => write!(f, "+"),
            TokenKind::PlusEqual => write!(f, "+="),
            TokenKind::Minus => write!(f, "-"),
            TokenKind::MinusEqual => write!(f, "-="),
            TokenKind::Star => write!(f, "*"),
            TokenKind::StarEqual => write!(f, "*="),
            TokenKind::Slash => write!(f, "/"),
            TokenKind::SlashEqual => write!(f, "/"),
            TokenKind::String(s) => write!(f, "string({s})"),
            TokenKind::Char(c) => write!(f, "char({c})"),
            TokenKind::Integer(i) => write!(f, "integer({i})"),
            TokenKind::Float(fl) => write!(f, "float({fl})"),
            TokenKind::Ident(i) => write!(f, "ident({i})"),
            TokenKind::And => write!(f, "and"),
            TokenKind::Class => write!(f, "class"),
            TokenKind::Do => write!(f, "do"),
            TokenKind::Else => write!(f, "else"),
            TokenKind::End => write!(f, "end"),
            TokenKind::False => write!(f, "false"),
            TokenKind::For => write!(f, "for"),
            TokenKind::Func => write!(f, "func"),
            TokenKind::If => write!(f, "if"),
            TokenKind::In => write!(f, "in"),
            TokenKind::Import => write!(f, "import"),
            TokenKind::Let => write!(f, "let"),
            TokenKind::Match => write!(f, "match"),
            TokenKind::Mut => write!(f, "mut"),
            TokenKind::New => write!(f, "new"),
            TokenKind::Or => write!(f, "or"),
            TokenKind::Return => write!(f, "return"),
            TokenKind::Trait => write!(f, "trait"),
            TokenKind::True => write!(f, "true"),
            TokenKind::While => write!(f, "while"),
            TokenKind::With => write!(f, "with"),
            TokenKind::Newline => write!(f, "newline"),
            TokenKind::Error(s) => write!(f, "{}", s),
            TokenKind::EoF => write!(f, "End of File"),
        }
    }
}
